/** Enter your program here */
module KeyPad(output reg[15:0] last4,
              input [3:0] key,
              input pressed,
              input clk);

   // Add your implementation here
reg [15:0]prev_last4;
reg [3:0]prev_key;

initial begin 
last4 = 0;
end

always @ (posedge clk) begin

if (pressed) begin
 last4 <= ((last4 % 1000)*10) + key; 
end

prev_key <= key;

end
   
endmodule

module ReqKeyPad(input [3:0] key,
                 input pressed,
                 input clk);

   wire [15:0] last4;
   KeyPad keypad(last4, key, pressed, clk);
reg [15:0]prev_last4;
reg [3:0]prev_key;
reg last_val;

initial begin 
prev_last4 = 0;
prev_key = 0;
last_val = 0;
end

always @ (posedge clk) begin
    prev_last4 = last4;

prev_key <= key;
end


   // Add requirements R4, R5, R6, and assumption E1 here
assume property(key >= 0 && key <10);
assert property(last4 >= 0 && last4 < 10000);
assert property(pressed |=> last4 % 10  == prev_key);
assert property(!pressed |=> last4 == prev_last4);
   
endmodule




////////////////////////////////////////////////////////////////////////////////////////////////////////////

module Control(output reg code_matches,
               input pressed,
               input [15:0] last4,
               input set_code,
               input clk);

   // Add your implementation here

reg [15:0] code;
reg set;
reg prev_pressed;

initial begin
code_matches = 0;
prev_pressed = 0;
set = 0;
end
 
always @ (posedge clk) begin

if (set_code) begin
code <= last4;
set <= 1;
end


if (last4 == code && set && pressed)
code_matches <= 1;

if(last4 != code || !pressed)
code_matches <= 0;

prev_pressed <= pressed;

end

endmodule


module ReqControl(input pressed,
                  input [15:0] last4,
                  input set_code,
                  input clk);

   wire code_matches;
   Control control(code_matches, pressed, last4, set_code, clk);

reg [15:0] code;
reg set;
reg prev_pressed;

initial begin
prev_pressed = 0;
set = 0;
end

always @ (posedge clk) begin

if (set_code)
set <= 1;

prev_pressed <= pressed;

end 


   // Add requirements R7, R8, R9, and assumption E2 here
assume property (last4 >= 0 && last4 <10000);
assert property (!set |-> !code_matches);
assert property (code_matches |-> prev_pressed);
assert property (1);
//assert property (set && last4 == code && pressed |=> code_matches);

endmodule
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////




module Lock(output unlocked,
            input [3:0] key,
            input pressed,
            input set_code,
            input clk);

   wire [15:0] last4;
   wire code_matches;

   // we delay the signals pressed and set_code going to the controller
   // by one cycle, to compensate for the delay of last4 introduced
   // by the keypad

   reg pre_pressed = 0, pre_set_code = 0;
   always @(posedge clk) begin
     pre_pressed = pressed;
     pre_set_code = set_code;
   end

   KeyPad  keypad(last4, key, pressed, clk);
   Control control(code_matches, pre_pressed, last4, pre_set_code, clk);

   reg [3:0] i = 15;
   always @(posedge clk) begin
     if (code_matches)
       i = 0;
     else if (i < 15)
       i = i + 1;
   end

   assign unlocked = code_matches || i < 9;

endmodule

module ReqLock(input [3:0] key,
               input pressed,
               input set_code,
               input clk);

   wire unlocked;
   Lock lock(unlocked, key, pressed, set_code, clk);

   // Add requirements R1, R2, and assumption E1 here
   reg [4:0] cycles = 0;
   reg pressed_while_locked = 0;

   always @(posedge clk) begin
     if (pressed)
       cycles = 0;
     else if (unlocked)
       cycles = cycles + 1;

     if (!unlocked && pressed)
       pressed_while_locked <= 1;

     if (unlocked)
       pressed_while_locked <= 1;
   end

   assume property (key >= 0 && key < 10); // E1
   assert property (!pressed |=> !unlocked && !pressed |=> !unlocked); // R1
   assert property (cycles <= 11); // R2

   // Bonus requirement:
   // After setting the code to 1234,
   // entering 1234 again will unlock the door
   assert property (key == 1 && pressed |=>
                    key == 2 && pressed |=>
                    key == 3 && pressed |=>
                    key == 4 && pressed |=>
                    !pressed && set_code |=>
                    key == 1 && pressed && !set_code |=>
                    key == 2 && pressed && !set_code |=>
                    key == 3 && pressed && !set_code |=>
                    key == 4 && pressed && !set_code |=>
                    ##1 unlocked);

endmodule